// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c:$borders_edge) {
// outer highlight "used" on most widgets
  @return 0 1px $c;
}

@mixin _shadows($shadow1, $shadow2:none, $shadow3:none, $shadow4:none) {
//
// Helper function to stack up to 4 box-shadows;
//
  @if $shadow4!=none { box-shadow: $shadow1, $shadow2, $shadow3, $shadow4; }
  @else if $shadow3!=none { box-shadow: $shadow1, $shadow2, $shadow3; }
  @else if $shadow2!=none { box-shadow: $shadow1, $shadow2; }
  @else { box-shadow: $shadow1; }
}

// entries

@function entry_focus_border($fc:$selected_bg_color) {
  @if $variant == 'light' { @return $fc; }
  @else { @return if($fc==$selected_bg_color, $selected_borders_color, darken($fc, 35%)); }
}

@mixin entry($t, $fc:$selected_bg_color, $edge: $borders_edge) {
//
// Entries drawing function
//
// $t: entry type
// $fc: focus color
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
//

  background-color: transparent;
  background-color: $base_color;
  $_blank_edge: if($edge == none, none, 0 0px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
  }
  @if $t==osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, transparentize(opacify($osd_borders_color, 1), 0.5));
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
  }
  @if $t==osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-image: linear-gradient(to bottom, transparentize(opacify($osd_borders_color, 1), 0.5));
    background-clip: padding-box;
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
  }
  @if $t==osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $osd_insensitive_bg_color);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
}

// buttons

@function _border_color ($c) { @return darken($c, 25%); } // colored buttons want
                                                         // the border from the
                                                         // base color

@function _text_shadow_color ($tc:$fg_color, $bg:$bg_color) {
//
// calculate the color of text shadows
//
// $tc is the text color
// $bg is the background color
//
  $_lbg: lightness($bg)/100%;
  @if lightness($tc)<50% { @return transparentize(white, 1-$_lbg/($_lbg*1.3)); }
  @else { @return transparentize(black, $_lbg*0.8); }
}

@mixin _button_text_shadow ($tc:$fg_color, $bg:$bg_color) {
//
// helper function for the text emboss effect
//
// $tc is the optional text color, not the shadow color
//
// TODO: this functions needs a way to deal with special cases
//

  $_shadow: _text_shadow_color($tc, $bg);

  @if lightness($tc)<50% {
    text-shadow: 0 1px $_shadow;
    icon-shadow: 0 1px $_shadow;
  }
  @else {
    text-shadow: 0 -1px $_shadow;
    icon-shadow: 0 -1px $_shadow;
  }
}

@mixin button($t, $c:$bg_color, $tc:$fg_color, $edge: $borders_edge) {
//
// Button drawing function
//
// $t:    button type,
// $c:    base button color for colored* types
// $tc:   optional text color for colored* types
// $edge: set to none to not draw the bottom edge or specify a color to not
//        use the default one
//
// possible $t values:
// normal, hover, active, insensitive, insensitive-active,
// backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
// osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
//

  $z-depth-1: 0 1px transparentize(black, 0.92);
  $z-depth-2: inset 0 2px transparentize(black, 0.98), 
              inset 0 0 0 1px transparentize(black, 0.98);

  // Border colors
  $btn-border: if($c!=$bg_color, _border_color($c), $borders_color);

  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge, 1)));

  @if $t==normal {
  // normal button
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: $btn-border;
    background-color: if($variant == 'light', lighten($c, 6%), $base_color);
  }

  @else if $t==hover {
  // hovered button
    color: $tc;
    background-color: if($variant == 'light', mix(lighten($c, 8%), transparentize($selected_bg_color, 0.9), 20%), lighten($base_color, 4%));
  }

  @else if $t==active {
  // pushed button
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: $btn-border;
    background-color: darken($c, 6%);
    box-shadow: $z-depth-2;
  }
  @else if $t==hoveractive {
  // pushed button
    color: $tc;
    background-color: darken($c, 6%);
  }
  @else if $t==insensitive {
  // insensitive button
    $_bg: if($c!=$bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);

    color: if($tc!=$fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    border-color: $btn-border;
    background-color: $_bg;
    text-shadow: none;
    icon-shadow: none;
    box-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    > .label { color: inherit; }
  }
  @else if $t==insensitive-active {
  // insensitive pushed button
    $_bg: if($c!=$bg_color, darken(mix($c, $base_color, 85%), 5%),
                            $insensitive_bg_color);
    $_bc: if($c!=$bg_color, _border_color($c), $insensitive_borders_color);
    color: if($c!=$bg_color, mix($tc, $_bg, 60%), $insensitive_fg_color);
    border-color: $_bc;
    box-shadow: none;
    background-color: darken($c, 5%);
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha

    > .label { color: inherit; }
  }

  @else if $t==osd {
  // normal osd button
    $_bg: if($c!=$bg_color, transparentize($c, 0.5),
                            $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg);
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-hover {
  // active osd button
    $_bg: if($c!=$bg_color, transparentize($c, 0.3),
                            lighten($osd_bg_color, 12%));

    color: white;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg);
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: 0 1px black;
    icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-active {
  // active osd button
    $_bg: if($c!=$bg_color, $c, $osd_borders_color);

    color: white;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $_bg);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $t==osd-insensitive {
  // insensitive osd button
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-image: linear-gradient(to bottom, $osd_insensitive_bg_color);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t==undecorated {
  // reset
    border-color: transparent;
    background-color: transparent;
    background-image: none;

    @include _shadows(inset 0 1px transparentize(white, 1),
                      $_blank_edge);

    text-shadow: none;
    icon-shadow: none;
  }
}

@mixin trough($flat:false, $c:$bg_color, $tc:$fg_color, $noedge:false) {
  color: mix($tc, $bg_color, 80%);
  @if $flat { background-color: lighten($c, 10%); }
  @else {
    background-color: lighten($c, 10%);
  }

  border-color: if($c!=$bg_color, _border_color($c), $border_color);

  @if not($noedge) {
    @if lightness($c) > 60% {
      box-shadow: inset 0 -1px $borders_edge,
                  0 1px $borders_edge;
    }
    @else {
      box-shadow: inset 0 -1px transparentize($borders_edge, 0.5),
                  0 1px transparentize($borders_edge, 0.5);
    }
  }
  @else { box-shadow: none; }
}

@mixin progressbar_fill($d:horizontal) {
  $dir: if($d==vertical,right,bottom);
  background-color: $selected_bg_color;
}

@mixin headerbar_fill($c:$bg_color, $tc:lighten($c, 4%), $hc:transparentize($top_hilight, 0.7)) {
//
// headerbar fill
//
// $c:  bg color
// $tc: top color
// $hc: top highlight color
// $bc: bottom highlight color
//
  background-color: darken($c, 4%);
}

@mixin ssd_fill($c:$bg_color, $tc:lighten($c, 4%), $hc:transparentize($top_hilight, 0.7)) {
//
// server side decoration fill
//
// $c:  bg color
// $tc: top color
// $hc: top highlight color
//
  background-color: darken($c, 4%);
  box-shadow: none;
}

@mixin toolbar_fill($c:$bg_color, $bc:$borders_color) {
//
// toolbar and tab header fill
//
// $c: bg color
// $bc: border color
//         
  background-color: darken($c, 8%);
  box-shadow: inset 0 -1px $borders_color;
}

@mixin overshoot($p, $t:normal, $c:$fg_color) {
//
// overshoot
//
// Screw this shit
  background-image: none;
  background-color: transparent;
  border: none;
  box-shadow: none;
}

@mixin undershoot($p) {
//
// undershoot
//
// Screw this shit
  background-image: none;
  background-color: transparent;
  border: none;
  box-shadow: none;
}
